ex2:- 
Step 1: Install Git  
Step 2: Configure Git
           git config --global user.name "Your Name"
           git config --global user.email "your.email@example.com"
Step 3: Set up the default branch name (optional)
          git config --global init.defaultBranch main
Step 4: Verify your Git configuration
           git config --list
Cloning a Remote Repository
            git clone command
            git clone <remote-url>
Adding a Remote Repository
            git remote add <remote-name> <remote-url>
Pushing Changes to a Remote Repository
            git push <remote-name> <branch-name>
Pulling Changes from a Remote Repository
            git pull <remote-name> <branch-name>



EX. NO: 3 VERSION CONTROL IN SOFTWARE APPLICATION DEVELOPMENT
             
What is a “version control system”?
Version control systems are a category of software tools that helps in recording
changes made to files by keeping a track of modifications done in the code.

Types of Version Control Systems:
• Local Version Control Systems
• Centralized Version Control Systems
• Distributed Version Control Systems

Three important steps of version control:
git add changed files to version control tracking.
git commit the changed files to create a unique snapshot of the local repository.
git push those changed files from the local copy of a repository to the cloud

Check the Status of Changes Using GIT Status
Once you start working, you can use the
being identified by git.

git status command to check what changes are

To practice working with this command, use the terminal to navigate to your git practice
repository:
$ cd practice-git-skillz
Next, run git status.
$ git status
On branch main
Your branch is up to date with
'origin/main'.nothing to commit,
working tree clean
Notice that when you run git status it returns: working tree clean. This means that
there areno changes to any files in your repo - YET.
Next, open and make a small change to the README.md file in a text editor. Then, run the
command git status to check that changes have been made to your file(s).
git status
On branch main
Your branch is up-to-date with
'origin/main'.Changes not staged for
commit:


Important Git Commands
These two commands make up the bulk of many workflows that use git for version control:
git add: takes a modified file in your working directory and places the modified
version in a staging area for review.
git commit: takes everything from the staging area and makes a permanent snapshot
of the current state of your repository that has a unique identifier.

Add Changed Files Using git add

After making changes, you can add either an individual
control tracking. To add a single file, run the command:
git add file-name.extension
For example, to add the README.md file, you would use:
git add README.md
You can also add all of the files that you have edited at the same time using:
git add .
Commit Changed Files Using git commit

Once you are ready to make a snapshot of the current state of your repository (i.e. move
changes from staging area), you can run git commit. The git commit command requires a
commit message that describes the snapshot (i.e. changes) that you made in that commit.
A commit message should outline what changed and why. These messages:
1. help collaborators and your future self understand what was changed and why.
2. allow you and your collaborators to find (and undo if necessary) changes that were
previously made.
When you are not committing a lot of changes, you can create a short one line commit
message using the -m flag as follows:
git commit -m "Update title and author name in homework for week 3"
modified: README.md
no changes added to commit (use "git add" and/or "git commit -a")
The output from the git status command above indicates that you have modified a file
(e.g. README.md) that can be added to version control.

file or groups of files to version


Creating branches
To keep track of changes to this file using git, you need to:
1. Clone the repository.
2. Move into the cloned repository
3. Create a new branch using the command (replace feature-branch with your desired branch
name).
git checkout -b feature-branch
4. Make modifications to files in your project.
5. Use git add to add the changes to the staging area
6. Commit the changes with a meaningful message
Merging branches
To keep track of changes to this file using git, you need to:
1. Switch back to the main branch.
git checkout main
2. Merge the branch into the main branch
git merge feature-branch
3. Resolve conflicts (if necessary)
i. Open the conflicting files and resolve the conflicts manually.
ii. After resolving conflicts, add the changes to the staging area and commit:
git add .
git commit -m "Merge feature-branch into main"
4. Push changes to github using the following command.
git push origin main



Ex. No: 4 GITHUB ISSUES

Github Issues:
GitHub Issues is a robust project management feature integrated into the GitHub platform, designed to
streamline collaboration, communication, and issue tracking within software development projects.
It serves as a centralized hub for tracking tasks, enhancements, bug reports, and other project-related
activities within a GitHub repository. It provides a structured and organized way for development teams
to manage their workflow, ensuring that issues are identified, discussed, and resolved efficiently.

Steps to Create and Address GitHub Issues
1. Create a new issue in your repository:
i. Go to your GitHub repository.
ii. Click on the "Issues" tab.
iii. Click the "New issue" button.
iv. Fill in the issue title and description.
v. Optionally, assign the issue to a collaborator, apply labels, and set milestones.
2. Assign the issue to a collaborator:
i. Within the issue, use the "Assignees" section to assign the issue to a collaborator.
ii. The assigned collaborator will receive notifications about the issue.
3. Label the issue with appropriate tags:
i. Apply labels to categorize and prioritize issues.
ii. Create and use labels like "bug," "feature," or any relevant labels for your project.
iii. Labels can be added when creating the issue or edited later.
4. Close the issue using a commit message:
i. Make changes to the codebase to address the issue.
ii. In your local repository, commit the changes with a commit message that references the
issue number:
git commit -m "Fix #1: Resolve issue with feature X"
Replace "1" with the actual issue number.
iii. Push the changes to GitHub:
git push origin main
The issue will be automatically closed when the commit is pushed.

5. Optional: Comment and Discuss:
i. Encourage collaboration by adding comments to the issue.
ii. Mention collaborators using @username to notify them.
iii. Discuss the issue, provide additional information, or ask for feedback.




Ex.No: 5  WORKING WITH COLLABORATIVE REPOSITORY MANAGEMENT USING GIT

Working with collaborative repository management using Git involves collaborating
with other developers and effectively managing changes to ashared codebase. Here are some
key practices and concepts to consider:


*Forking a Repository*
- Start by forking the repository on GitHub.
- Creates a personal copy under your account for changes.

*Cloning a Forked Repository*
- Use git clone to bring the forked repo to your local machine.

*Adding an Upstream Remote*
- Original repo is the "upstream."
- Add it as a remote to sync with changes.

*Keeping Your Forked Repository Up to Date*
- Fetch latest changes from upstream.
- Checkout and merge changes to your local branch.
- Push updates to your forked repo.

*Creating Branches for Collaborative Work*
- Create branches for features/fixes with git branch.
- Switch to new branches with git checkout or git checkout -b.

*Pushing Changes and Creating Pull Requests*
- Push branch changes to your forked repo.
- Create a pull request on the upstream repo.
- Choose appropriate branches and provide details.

*Reviewing and Merging Pull Requests*
- Collaborators/maintainers review and comment.
- Address feedback if needed.
- Once approved, changes can be merged into the upstream repository.




EX. NO: 6 IMPLEMENTATION OF CORE REVIEW IN GIT

Introduction
Git is a powerful tool for version control, but it’s also a crucial tool for collaborating
with remote teams. When working remotely, effective communication and collaboration are
key to ensure that your team is working together towards a common goal.

**Using a Shared Repository**
- Central to collaboration.
- Establishes a remote server for team access.
- Commands: `git init`, `git clone`, `git remote add`, `git fetch`, `git pull`, `git push`.

**Branching and Merging**
- Facilitates simultaneous work.
- Commands: `git branch`, `git checkout`, `git merge`.
- Resolve conflicts with `git mergetool`.
- Delete branches with `git branch -d`.

**Pull Requests**
- Review and merge changes.
- Commands: `git request-pull`, `git pull-request`.
- Close requests with `git request-pull -C`.

**Issue Tracking**
- Manage bugs and tasks.
- Commands: `git commit -m`, `git assign`, `git clone`, `git reopen`.

**Effective Communication**
- Vital for remote teams.
- Utilize tools like Slack or Teams.
- Video calls: `git video-call`.
- Screen sharing: `git screen-share`.
- Messaging: `git message`.

**Git Hooks**
- Automate tasks in workflow.
- Commands: `git init`, script writing, `chmod +x`.

**Git Submodules**
- Manage dependencies or shared code.
- Commands: `git submodule add`, `git submodule update`, `git submodule deinit`.

**Git Aliases**
- Shortcuts for commands.
- Setup: `git config --global alias`, usage: `git [alias name]`.
